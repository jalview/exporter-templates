
<meta charset="UTF-8">
<link type="text/css" rel="stylesheet" href="https://raw.githubusercontent.com/jalview/exporter-templates/master/biojs/0.2.0/biojs.css">
<script src="https://raw.githubusercontent.com/jalview/exporter-templates/master/biojs/0.2.0/bjs-msa-core.javascript"></script>
<script src="https://raw.githubusercontent.com/jalview/exporter-templates/master/biojs/0.2.0/biojs-io-clustal.javascript"></script>
 

<input type="button" name="divToggleButton" id="divToggleButton" onclick="javascipt:toggleMenuVisibility();" value="Show BioJS Menu"></input>
<button onclick="javascipt:openJalviewUsingCurrentUrl();">Launch in Jalview</button>

<br/> &nbsp;

<div style="border: 2px solid blue; border: 2px solid blue; width: 99%;   min-height: 99%; padding: 5px 5px 5px 5px;" id='snippetDiv'></div>
<div style="padding: 5px 5px 5px 5px; vertical-align: middle; position: absolute;right: 0px; width: 210px;">Generated from 
 <img width=100 height=25 src="http://www.jalview.org/help/html/Jalview_Logo.png" alt="Jalview Logo" title="This html page was generated from Jalview, to import the data back to Jalview, please drag the generated html file and drop it unto the Jalview workbench. Alternatively, you could copy the url from the address bar and use Jalview's url importer (main menu-> File-> Input Alignment-> from URL) to import back the alignment jalview." /><div>
  
</body> 
</html>

<script>
    function toggleMenuVisibility() {
        var menu = document.getElementsByClassName("smenubar");
        var divToggleButton = document.getElementById("divToggleButton");
        if (menu[0].style.display == 'block') {
            menu[0].style.display = 'none';
            divToggleButton.value = "Show BioJS Menu";
        } else {
            menu[0].style.display = 'block';
            divToggleButton.value = "Hide BioJS Menu";
        }
    }

    function openJalviewUsingCurrentUrl() {
        var json = JSON.parse(document.getElementById("seqData").value)
        var jalviewVersion = json['appSettings'].version;
        var url = json['appSettings'].webStartUrl;
        var myForm = document.createElement("form");
        myForm.action = url;

        var heap = document.createElement("input");
        heap.setAttribute("name", "jvm-max-heap");
        heap.setAttribute("value", "2G");
        myForm.appendChild(heap);

        var target = document.createElement("input");
        target.setAttribute("name", "open");
        target.setAttribute("value", document.URL);
        myForm.appendChild(target);

        var jvVersion = document.createElement("input");
        jvVersion.setAttribute("name", "version");
        jvVersion.setAttribute("value", jalviewVersion);
        myForm.appendChild(jvVersion);

        document.body.appendChild(myForm);
        myForm.submit();
        document.body.removeChild(myForm);
    }
 
    //convert BioJSON colour scheme to BioJS colour scheme
    function convertToBioJSColourScheme(cs) {
        if (cs.toUpperCase() === "TAYLOR") {
            return "taylor";
        }
        if (cs.toUpperCase() === "CLUSTAL") {
            return "clustal";
        }
        if (cs.toUpperCase() === "NUCLEOTIDE") {
            return "nucleotide";
        }
        if (cs.toUpperCase() === "PURINE/PYRIMIDINE") {
            return "purine";
        }
        if (cs.toUpperCase() === "HELIX PROPENSITY") {
            return "helix";
        }
        if (cs.toUpperCase() === "TURN PROPENSITY") {
            return "turn";
        }
        if (cs.toUpperCase() === "BURIED INDEX") {
            return "buried";
        }
        if (cs.toUpperCase() === "HYDROPHOBIC") {
            return "hydro";
        }
        if (cs.toUpperCase() === "% IDENTITY") {
            return "pid";
        }
        if (cs.toUpperCase() === "ZAPPO") {
            return "zappo";
        }

        //these colour scheme are not yet supported by BioJS 
        if (cs.toUpperCase() === "T-COFFEE SCORES") {
            return "T-Coffee Scores";
        }
        if (cs.toUpperCase() === "RNA INTERACTION TYPE") {
            return "RNA Interaction type";
        }
        if (cs.toUpperCase() === "BLOSUM62") {
            return "Blosum62";
        }
        if (cs.toUpperCase() === "RNA HELICES") {
            return "RNA Helices";
        }
        return "foo";
    }

    function parseBioJSONFeatures(bioJSONFeatures, m) {
        //console.debug(">>>>>>>>>>>>>" + m.seqs.length);
        //console.debug(">>>>>>>>>>>>> Found features : " + bioJSONFeatures.length);
	
	var colours = {};
	var features = [];


        m.seqs.forEach(function(seq) {
            var seqFeats = [];
            for (i = 0; i < bioJSONFeatures.length; i++) {
                console.debug('comparing >>>>>>>> ' + seq.id)
                if (bioJSONFeatures[i].sequenceRef === seq.id) { 
                    console.debug('>>>>>>>> ' + bioJSONFeatures[i].sequenceRef + ' | ' + seq.id)
                    var f1 = convertBioJSONFeatureToBioJS(bioJSONFeatures[i]);
                    //console.debug(f1);
                    //seqFeats.push(f1);
		    f1.attributes.Parent = seq;
		    features.push(f1);
		    colours[bioJSONFeatures[i].type] = bioJSONFeatures[i].fillColor;
                }
            }
            //console.debug('matched features count : ' + seqFeats.length);
        });

        //console.debug(seqs);
	
        return{
	 colours: colours,
	 features: features
	}
    }

    function convertBioJSONFeatureToBioJS(bioJSONFeat) {
	var obj = {
	  attributes:{}
	};
	obj.attributes.Name = bioJSONFeat.type; //desc
  	obj.seqname = bioJSONFeat.id; // id
  	obj.start = bioJSONFeat.xStart;
  	obj.end = bioJSONFeat.xEnd;
  	obj.feature = bioJSONFeat.type;

  return obj;
       /* var bioJSFeat = {
	    attributes:{Name: bioJSONFeat.type},
            start: bioJSONFeat.xStart,
            end: bioJSONFeat.xEnd,
            feature: bioJSONFeat.description,
	    seqname: bioJSONFeat.type,
         };
        return bioJSFeat;*/
    }

    function convertBioJSONFeatureToBioJS_old(bioJSONFeat) {
        var bioJSFeat = {
            xStart: bioJSONFeat.xStart,
            xEnd: bioJSONFeat.xEnd,
            height: -1,
            text: bioJSONFeat.description,
            fillColor: bioJSONFeat.fillColor,
            fillOpacity: 0.5,
            type: "rectangle",
            borderSize: 1,
            borderColor: bioJSONFeat.fillColor,
            borderOpacity: 0.5,
            validate: true,
            row: -1,
        };
        return bioJSFeat;
    }


var yourDiv = document.getElementById('snippetDiv');

/* global yourDiv */
var msa = require("msa");
var clustal = require("biojs-io-clustal");

// set your custom properties
// @see: https://github.com/greenify/msa/tree/master/src/g

var menuDiv = document.createElement('div');
var msaDiv = document.createElement('div');
yourDiv.appendChild(menuDiv);
yourDiv.appendChild(msaDiv);

var opts = {
  el: msaDiv
};

opts.conf = {
  dropImport: true
};
opts.vis = {
  conserv: false,
  overviewbox: false,
  labelId: false,
  seqlogo: false
};

// init msa
var m = msa(opts);

var jalviewData = JSON.parse(document.getElementById("seqData").value);

// download the sequences itself
clustal.read("#", function(err, seqs) {
  m.seqs.reset(jalviewData['seqs']);
  var feats = parseBioJSONFeatures(jalviewData.seqFeatures, m);
  console.debug('======================' + feats);
  m.seqs.addFeatures(feats);
  m.render();
});

var cs = convertToBioJSColourScheme(jalviewData['appSettings'].globalColorScheme);
m.g.colorscheme.set("scheme", cs);

// add features
//xhr("/github/greenify/msa/master/snippets/data/fer1.gff3", function(err, request, body) {
//  var features = gffParser.parseSeqs(body);
//  m.seqs.addFeatures(features);
//});

//xhr("/github/greenify/msa/master/snippets/data/fer1.gff_jalview", function(err, request, body) {
//  var features = gffParser.parseSeqs(body);
//  m.seqs.addFeatures(features);
//});

// the menu is independent to the MSA container
var defMenu = new msa.menu.defaultmenu({
  el: menuDiv,
  msa: m
});
defMenu.render();

toggleMenuVisibility();
//toggleMenuVisibility();

// BioJS event system test (you can safely remove this in your app)
//instance=m.g

</script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-51509688-4', 'auto');
  ga('send', 'pageview');
</script>
